#name: Arthur_Athena-ImmortalWrt
name: AA-ImmWrt-T4.Combine

on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * 4' # Âåó‰∫¨Êó∂Èó¥Âë®‰∫î0ÁÇπ = UTCÂë®Âõõ16ÁÇπ Ëá™Âä®Ëß¶Âèë
  workflow_run:
    workflows: ["All-Clean"]
    types:
      - completed
env:
  REPO_URL: https://github.com/laipeng668/immortalwrt.git
  REPO_BRANCH: master
  GENERAL_CONFIG_FILE: configs/General.config
  DIY_SCRIPT: scripts/script.sh
  CLASH_KERNEL: amd64
  MADS: true
  UPLOAD_BIN_DIR: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Arthur_Athena
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config_file: 
          - configs/Arthur_Athena_Lite.config
          - configs/Arthur_Athena_Full.config       
        
    steps:
    - name: Check Server Performance(Ê£ÄÊü•ÊúçÂä°Âô®ÊÄßËÉΩ)
      run: |
        echo "Ë≠¶Âëä‚ö†"
        echo "ÂàÜÈÖçÁöÑÊúçÂä°Âô®ÊÄßËÉΩÊúâÈôêÔºåËã•ÈÄâÊã©ÁöÑÊèí‰ª∂ËøáÂ§öÔºåÂä°ÂøÖÊ≥®ÊÑèCPUÊÄßËÉΩÔºÅ"
        echo -e "‚ö°Â∑≤Áü•CPUÂûãÂè∑ÔºàÈôçÂ∫èÔºâÔºö7763Ôºå8370CÔºå8272CLÔºå8171MÔºåE5-2673 "
        echo "--------------------------CPU‰ø°ÊÅØ--------------------------"
        echo "‚ö°CPUÁâ©ÁêÜÊï∞ÈáèÔºö$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "‚ö°CPUÊ†∏ÂøÉ‰ø°ÊÅØÔºö$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) "
        echo "--------------------------ÂÜÖÂ≠ò‰ø°ÊÅØ--------------------------"
        echo "üì¶Â∑≤ÂÆâË£ÖÂÜÖÂ≠òËØ¶ÁªÜ‰ø°ÊÅØÔºö"
        echo -e "$(sudo lshw -short -C memory | grep GiB) "
        echo "--------------------------Á°¨Áõò‰ø°ÊÅØ--------------------------"
        echo "üíæÁ°¨ÁõòÊï∞ÈáèÔºö$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Maximize Available Disk Space(ÊúÄÂ§ßÂåñÂèØÁî®Á£ÅÁõòÁ©∫Èó¥)
      if: env.MADS == 'true'
      uses: AdityaGarg8/remove-unwanted-software@master
      with:
        remove-dotnet: "true"
        remove-android: "true"
        remove-haskell: "true"
        remove-codeql: "true"
        remove-docker-images: "true"
        remove-large-packages: "true"
        remove-cached-tools: "true"
        remove-swapfile: "true"

    - name: Initialization Environment(ÂàùÂßãÂåñÁéØÂ¢É)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Checkout(Ê£ÄÂá∫‰ª£Á†Å)
      uses: actions/checkout@main

    - name: Clone Source Code(ÂÖãÈöÜÊ∫ê‰ª£Á†Å)
      run: |
        df -hT $GITHUB_WORKSPACE
        sudo mkdir -p /mnt/openwrt
        sudo chown -R $(id -u):$(id -g) /mnt/openwrt
        git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL /mnt/openwrt
        cd /mnt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="‰ΩúËÄÖ: %an<br/>Êó∂Èó¥: %cd<br/>ÂÜÖÂÆπ: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

    - name: Generate Variables(ÁîüÊàêÂèòÈáè)
      run: |
        # Use the matrix variable for config file
        CONFIG_FILE="${{ matrix.config_file }}"
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
        echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        # ‰ΩøÁî® shell ÂëΩ‰ª§ÁîüÊàêÊó•ÊúüÂèòÈáè
        echo "DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        # Extract short config filename for better naming
        CONFIG_FILENAME_SHORT=$(basename "${{ matrix.config_file }}")
        echo "CONFIG_FILENAME_SHORT=$CONFIG_FILENAME_SHORT" >> $GITHUB_ENV

    - name: Cache Toolchain(ÁºìÂ≠òÂ∑•ÂÖ∑Èìæ)
      uses: actions/cache@main
      with:
        key: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.HASH }} ${{ env.CACHE_DATE }}
        restore-keys: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-
        path: |
          ${{ env.OPENWRT_PATH }}/.ccache
          ${{ env.OPENWRT_PATH }}/staging_dir

    - name: Refresh The Cache(Âà∑Êñ∞ÁºìÂ≠ò)
      run: |
        if [ -d "$OPENWRT_PATH/staging_dir" ]; then
          find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
              find "$dir" -type f -exec touch {} +
          done
        fi

    - name: Install Feeds(ÂÆâË£Öfeeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration(Âä†ËΩΩËá™ÂÆö‰πâÈÖçÁΩÆ)
      run: |
        # Adjust merge order as before, put device config last.
        # cat $CONFIG_FILE $GENERAL_CONFIG_FILE > $OPENWRT_PATH/.config
        cat $GENERAL_CONFIG_FILE $CONFIG_FILE > $OPENWRT_PATH/.config
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT

    - name: Download DL Package(‰∏ãËΩΩDLËΩØ‰ª∂ÂåÖ)
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware(ÂºÄÂßãÁºñËØëÂõ∫‰ª∂)
      id: compile
      run: |
        # ÂêØÂä®ÂêéÂè∞ËµÑÊ∫êÁõëÊéßÔºà15ÂàÜÈíüÈó¥ÈöîÔºâ
        {
        while true; do
        sleep 900  # 15ÂàÜÈíüÈó¥Èöî
        echo "====================== ÁºñËØëÊúüÈó¥Á≥ªÁªüÂç†Áî®ÁõëÊéß ======================"
        echo "üïí ÁõëÊéßÊó∂Èó¥: $(date)"
        echo "üíæ Á£ÅÁõò‰ΩøÁî®ÊÉÖÂÜµ:"
        df -hT | grep -E '^(Filesystem|/dev/)'
        echo "üì¶ ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ:"
        free -h
        echo "‚ö° CPU Ë¥üËΩΩ:"
        uptime
        echo "=========================================================="
        echo "## üîÑ ÁºñËØëÊúüÈó¥Á≥ªÁªüÂç†Áî®ÁõëÊéß ÔºàÈ¢ëÁéá 15ÂàÜÈíüÔºâ"
        echo "- üïê ÂΩìÂâçÊó∂Èó¥: $(date)"
        #echo "- üíæ Á£ÅÁõò/dev/root‰ΩøÁî®Áéá: $(df -h / | tail -1 | awk '{print $5}')"
        echo "- üíæ Á£ÅÁõò/dev/sda1‰ΩøÁî®Áéá: $(df -h /dev/sda1 | tail -1 | awk '{print $5}')"
        echo "- üì¶ ÂÜÖÂ≠ò‰ΩøÁî®Áéá: $(free | grep Mem | awk '{printf("%.1f%%", $3/$2 * 100.0)}')"
        echo ""
        done
        } &  # ÂêéÂè∞ËøêË°å
        MONITOR_PID=$!
        # ‰∏ªÁºñËØëÊµÅÁ®ã
        cd $OPENWRT_PATH
        echo "üöÄ ÂºÄÂßãÁºñËØëÔºåÁ∫øÁ®ãÊï∞: $(nproc)"
        echo "üîß Ê≠£Âú®ÁºñËØëÈÖçÁΩÆÊñá‰ª∂: ${{ matrix.config_file }}"
        make -j$(nproc) || make -j1 || make -j1 V=s
        COMPILE_STATUS=$?
        # ÁªàÊ≠¢ÁõëÊéßËøõÁ®ã
        if ps -p $MONITOR_PID > /dev/null; then
          kill $MONITOR_PID
        fi
        echo "‚úÖ ÁºñËØëÂÆåÊàêÔºÅÁä∂ÊÄÅÁ†Å: $COMPILE_STATUS"
        # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
        echo "status=$([[ $COMPILE_STATUS -eq 0 ]] && echo success || echo failed)" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage(Ê£ÄÊü•Á©∫Èó¥‰ΩøÁî®ÊÉÖÂÜµ)
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory(‰∏ä‰º†Âõ∫‰ª∂)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}-${{ env.CONFIG_FILENAME_SHORT }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files(Êï¥ÁêÜÊñá‰ª∂)
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        # Use the short config filename for renaming
        CONFIG_FILENAME_SHORT="${{ env.CONFIG_FILENAME_SHORT }}"
        echo "CONFIG_FILENAME_SHORT=$CONFIG_FILENAME_SHORT" >> $GITHUB_ENV
        # Create a unique firmware name based on config file
        FIRMWARE_NAME="Arthur.Athena.${CONFIG_FILENAME_SHORT%.config}"
        cp $OPENWRT_PATH/.config "$FIRMWARE_NAME.config"
        mv config.buildinfo "$FIRMWARE_NAME.config.buildinfo"
        mv immortalwrt-qualcommax-ipq60xx.manifest immortalwrt-qualcommax-ipq60xx-"$FIRMWARE_NAME".manifest
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf "$FIRMWARE_NAME.Packages.tar.gz" packages
        rm -rf packages feeds.buildinfo version.buildinfo sha256sums profiles.json
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware To Artifact(Â∞ÜÂõ∫‰ª∂‰∏ä‰º†Âà∞Artifact)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}-${{ env.CONFIG_FILENAME_SHORT }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release(ÂèëÂ∏ÉÂõ∫‰ª∂)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}_${{ env.CONFIG_FILENAME_SHORT }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}_${{ env.CONFIG_FILENAME_SHORT }}**
          ### üìí Âõ∫‰ª∂‰ø°ÊÅØ
          - ËøôÊòØÂü∫‰∫é ${{ env.CONFIG_FILENAME_SHORT }} ÈÖçÁΩÆÁºñËØëÁöÑÂõ∫‰ª∂
          - ËØ•Âõ∫‰ª∂Âú®ImmortalWrtÁöÑÂü∫Á°Ä‰∏äÔºåÊ∑ªÂä†‰∫ÜÈ¢ùÂ§ñÁöÑËΩØ‰ª∂ÂåÖÔºåÂπ∂Ê∑ªÂä†‰∫ÜËã•Âπ≤Â∑•ÂÖ∑ÔºåÂÖ∑‰ΩìËØ¶ËßÅÂØπÂ∫îÊú∫ÂûãÁöÑconfig
          - üíª ËøôÊòØ ${{ env.FIRMWARE_TAG }} Âπ≥Âè∞‰ΩøÁî®ÁöÑ OpenWrt Âõ∫‰ª∂
          - ‚öΩ Âõ∫‰ª∂Ê∫êÁ†Å: ${{ env.REPO_URL }}
          - üíù Ê∫êÁ†ÅÂàÜÊîØ: ${{ env.REPO_BRANCH }}
          - üåê ÈªòËÆ§Âú∞ÂùÄ: **192.168.111.1**
          - üîë ÈªòËÆ§ÂØÜÁ†Å: none
          - üöÄ WiFiÂêçÁß∞: **Star**
          - üîë WiFiÂØÜÁ†Å: 12345678
          ### üìí Âõ∫‰ª∂ÁâàÊú¨
          - Âõ∫‰ª∂ÂÜÖÊ†∏ÁâàÊú¨Ôºö**${{ env.VERSION_KERNEL }}**
          - Âõ∫‰ª∂ÁºñËØëÂâçÊúÄÂêé‰∏ÄÊ¨°‚û¶[‰∏ªÊ∫êÁ†Å](${{ env.REPO_URL }})Êõ¥Êñ∞ËÆ∞ÂΩï
          - ${{ env.VERSION_INFO }}

    - name: Delete Old Cache(Âà†Èô§ÊóßÁºìÂ≠ò)
      run: |
        # Ëé∑ÂèñÁºìÂ≠òÂàóË°®Âπ∂Âà†Èô§
        gh cache list --key ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}- --json key --jq '.[] | .key' | while read -r key; do
          gh cache delete "$key"
        done
        # ËæìÂá∫ÁºìÂ≠òÁä∂ÊÄÅ
        echo "========cache status========"
        echo "ccache: $(du -sh $OPENWRT_PATH/.ccache | cut -f 1)"
        echo "staging: $(du -sh $OPENWRT_PATH/staging_dir | cut -f 1)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
