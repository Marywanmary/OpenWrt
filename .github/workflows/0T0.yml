# 定义工作流名称 - 当触发时会显示在GitHub Actions界面中
name: OpenWrt-Firmware-Build

# 定义触发条件 - 使用 workflow_dispatch 触发方式
on:
  workflow_dispatch:

# 定义工作流的权限设置 - 给予读写权限以进行构建
permissions:
  contents: read

# 定义工作流中的任务集合 - 称为 jobs
jobs:
  # 定义一个名为 build 的任务
  build:
    # 指定运行环境 - 使用 Ubuntu 最新版本
    runs-on: ubuntu-latest
    
    # 定义该任务需要执行的步骤集合
    steps:
      # 步骤1：检出代码 - 将仓库代码下载到工作环境中
      - name: Checkout Source Code
        uses: actions/checkout@v4
        
      # 步骤2：安装编译所需依赖包 - 为后续编译准备环境
      - name: Install Build Dependencies
        run: |
          echo "Installing build dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses5-dev \
            zlib1g-dev \
            gawk \
            git \
            ccache \
            gettext \
            libssl-dev \
            libelf-dev \
            flex \
            bison \
            bc \
            wget \
            unzip \
            python3 \
            libpython3-dev \
            libarchive-tools
          
      # 步骤3：清理可能存在的旧文件 - 解决前置检查失败问题
      - name: Clean Previous Build Files
        run: |
          echo "Cleaning previous build files..."
          rm -rf openwrt-source
          rm -rf ~/.ccache
          sudo apt-get clean
          
      # 步骤4：克隆OpenWrt源码仓库 - 获取指定分支的源代码
      - name: Clone OpenWrt Source
        run: |
          echo "Cloning OpenWrt source code..."
          git clone --branch k6.12-nss https://github.com/laipeng668/openwrt-6.x.git openwrt-source
          cd openwrt-source
          git submodule update --init --recursive
          echo "Clone completed. Directory contents:"
          ls -la
          
      # 步骤5：复制配置文件到正确位置 - 将我们提供的配置文件复制到OpenWrt源码目录
      - name: Copy Configuration File
        run: |
          echo "Copying configuration file..."
          mkdir -p openwrt-source/.config
          cp configs/Arthur_Athena_Full.config openwrt-source/.config/config
          echo "Configuration file content:"
          cat openwrt-source/.config/config
          
      # 步骤6：初始化OpenWrt配置
      - name: Initialize OpenWrt Configuration
        run: |
          echo "Initializing OpenWrt configuration..."
          cd openwrt-source
          # 清理之前的配置和构建文件
          rm -rf staging_dir build_dir tmp .config
          mkdir -p .config
          # 执行OpenWrt的配置脚本
          make defconfig
          
      # 步骤7：更新软件包列表
      - name: Update Package List
        run: |
          echo "Updating package list..."
          cd openwrt-source
          make dirclean
          make package/download V=s
          
      # 步骤8：开始编译OpenWrt固件 - 核心编译步骤
      - name: Compile OpenWrt Firmware
        run: |
          echo "Starting firmware compilation..."
          cd openwrt-source
          
          # 预检查编译环境
          if [ ! -f ".config/config" ]; then
            echo "❌ Configuration file not found!"
            exit 1
          fi
          
          # 尝试编译，带合理的错误处理
          echo "Compiling with parallel jobs..."
          make -j$(nproc) V=s || {
            echo "⚠️ First compilation attempt failed, trying recovery..."
            # 清理并重新配置
            rm -rf staging_dir build_dir tmp
            make clean
            make defconfig
            echo "Retrying compilation..."
            make -j$(nproc) V=s
          }
          
      # 步骤9：检查编译结果 - 验证是否成功生成固件
      - name: Verify Compilation Result
        run: |
          echo "Checking compilation results..."
          cd openwrt-source
          echo "Generated firmware files:"
          find bin/targets -name "*.img" -o -name "*.bin" -o -name "*.tar.gz" | head -10
          
      # 步骤10：上传编译产物 - 将生成的固件文件上传到GitHub
      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-Firmware-${{ github.run_number }}
          path: |
            openwrt-source/bin/targets/**
          retention-days: 7
          
      # 步骤11：显示编译完成信息
      - name: Compilation Complete
        run: |
          echo "✅ OpenWrt Firmware Build Completed Successfully!"
          echo "🔧 Firmware files are available in the Artifacts section"
          echo "📦 Run number: ${{ github.run_number }}"
