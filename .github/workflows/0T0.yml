# 定义工作流名称 - 当触发时会显示在GitHub Actions界面中
name: 0T0

# 定义触发条件 - 使用 workflow_dispatch 触发方式
on:
  workflow_dispatch:

# 定义工作流的权限设置 - 给予读写权限以进行构建
permissions:
  contents: read

# 定义工作流中的任务集合 - 称为 jobs
jobs:
  # 定义一个名为 build 的任务
  build:
    # 指定运行环境 - 使用 Ubuntu 最新版本
    runs-on: ubuntu-latest
    
    # 定义该任务需要执行的步骤集合
    steps:
      # 步骤1：检出代码 - 将仓库代码下载到工作环境中
      - name: 检出源代码
        uses: actions/checkout@v4
        
      # 步骤2：设置工作目录 - 将当前工作目录切换到仓库根目录
      - name: 设置工作目录
        run: |
          cd ${{ github.workspace }}
          
      # 步骤3：安装编译所需依赖包 - 为后续编译准备环境
      - name: 安装编译依赖
        run: |
          # 更新系统包管理器索引
          sudo apt-get update
          # 安装编译OpenWrt所需的软件包
          sudo apt-get install -y build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev libelf-dev flex bison bc wget unzip
      
      # 步骤4：克隆OpenWrt源码仓库 - 获取指定分支的源代码
      - name: 克隆OpenWrt源码
        run: |
          # 克隆指定的OpenWrt仓库，分支为6.12-nss
          git clone --branch 6.12-nss https://github.com/laipeng668/openwrt-6.x.git openwrt-source
          
      # 步骤5：复制配置文件到正确位置 - 将我们提供的配置文件复制到OpenWrt源码目录
      - name: 复制配置文件
        run: |
          # 创建OpenWrt源码目录下的config目录（如果不存在）
          mkdir -p openwrt-source/.config
          # 将我们的配置文件从仓库根目录复制到OpenWrt源码目录
          cp configs/Arthur_Athena_Full.config openwrt-source/.config/config
  
      # 步骤6：进入OpenWrt源码目录并初始化配置
      - name: 初始化OpenWrt配置
        run: |
          # 进入OpenWrt源码目录
          cd openwrt-source
          # 执行OpenWrt的配置脚本，将配置文件应用到源码中
          make defconfig
          
      # 步骤7：下载并更新软件包列表 - 获取所有需要的软件包
      - name: 更新软件包列表
        run: |
          # 进入OpenWrt源码目录
          cd openwrt-source
          # 执行命令来更新软件包列表，确保获取最新版本
          make package/compile V=s
          
      # 步骤8：开始编译OpenWrt固件 - 核心编译步骤
      - name: 开始编译固件
        run: |
          # 进入OpenWrt源码目录
          cd openwrt-source
          # 执行编译命令，使用多线程加速编译过程（-j$(nproc)表示使用CPU核心数）
          # V=s参数用于显示详细编译信息，方便调试
          make -j$(nproc) V=s
          
      # 步骤9：检查编译结果 - 验证是否成功生成固件
      - name: 检查编译结果
        run: |
          # 进入OpenWrt源码目录
          cd openwrt-source
          # 查找生成的固件文件，通常位于bin/targets目录下
          echo "编译完成的固件文件:"
          ls -la bin/targets/*
          
      # 步骤10：上传编译产物 - 将生成的固件文件上传到GitHub
      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          # 设置上传的文件名前缀
          name: OpenWrt-Firmware
          # 指定要上传的文件路径模式
          path: |
            openwrt-source/bin/targets/*
            
      # 步骤11：显示编译完成信息
      - name: 编译完成提示
        run: |
          echo "✅ OpenWrt 编译已完成！"
          echo "🔧 固件文件已保存在 openwrt-source/bin/targets/ 目录下"
          echo "📦 可以在 GitHub Actions 的 Artifacts 中下载固件文件"
