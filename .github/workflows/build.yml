# 文件名: .github/workflows/build.yml

name: Compile OpenWrt Firmware for IPQ60XX (ARM64)

on:
  # 手动触发
  workflow_dispatch:
  # 每周予权力北京时间0点（UTC周一16点）触发
  schedule:
    - cron: '0 16 * * 5'

jobs:
  build_all_configs:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # 仅保留 LibWrt 仓库，减少错误来源
        # 定义所有设备和配置的组合
        # 注意: GitHub Actions 的 matrix 必须是对象数组
        repo: [{ value: LibWrt }] # 只保留 LibWrt
        device: [{ value: Aruthur }, { value: Athena }]
        config: [{ value: Lite }, { value: Full }]

    steps:
      # --- 1. 获取源码仓库信息 ---
      - name: Get Repo Info
        id: get_repo_info
        run: |
          # 根据 repo.value 确定仓库 URL 和分支
          if [ '${{ matrix.repo.value }}' = 'LibWrt' ]; then
            echo "REPO_OWNER=laipeng668" >> $GITHUB_ENV
            echo "REPO_NAME=openwrt-6.x" >> $GITHUB_ENV
            echo "REPO_BRANCH=k6.12-nss" >> $GITHUB_ENV
          fi
          echo "REPO_SHORT_NAME=${{ matrix.repo.value }}" >> $GITHUB_ENV
          echo "DEVICE_SHORT_NAME=${{ matrix.device.value }}" >> $GITHUB_ENV
          echo "CONFIG_NAME=${{ matrix.config.value }}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.BUILD_TIME }}_${{ env.REPO_SHORT_NAME }}_${{ env.DEVICE_SHORT_NAME }}_${{ env.CONFIG_NAME }}" >> $GITHUB_ENV
          echo "RELEASE_TITLE=${{ env.BUILD_TIME }}_${{ env.REPO_SHORT_NAME }}_${{ env.DEVICE_SHORT_NAME }}_${{ env.CONFIG_NAME }}" >> $GITHUB_ENV
          # 设置时区为北京时间 (UTC+8)
          echo "TZ=Asia/Shanghai" >> $GITHUB_ENV

      # --- 2. 克隆源码 ---
      # 修正: 使用 {owner}/{repo} 格式，而不是完整 URL
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}
          ref: ${{ env.REPO_BRANCH }}
          path: openwrt-source

      # --- 3. 获取版本信息 ---
      # 获取内核版本和版本信息
      - name: Get Version Information (获取版本信息)
        run: |
          cd openwrt-source
          echo "正在获取版本信息..."

          # 方法 1: 尝试从 kernel-version.mk 获取内核版本 (常见于 OpenWrt)
          if [ -f "include/kernel-version.mk" ]; then
            KERNEL_VERSION_LINE=$(grep -E "^LINUX_VERSION" "include/kernel-version.mk" | head -1)
            if [ -n "$KERNEL_VERSION_LINE" ]; then
              KERNEL_VERSION=$(echo "$KERNEL_VERSION_LINE" | sed -E 's/.*=([0-9.]+).*/\1/')
              echo "VERSION_KERNEL=$KERNEL_VERSION" >> $GITHUB_ENV
            fi
          fi

          # 方法 2: 如果上面没找到，尝试从 target/linux/ipq60xx/Makefile 获取 (针对 IPQ60XX)
          if [ -z "${{ env.VERSION_KERNEL }}" ] && [ -f "target/linux/ipq60xx/Makefile" ]; then
            KERNEL_VERSION_LINE=$(grep -E "LINUX_VERSION" "target/linux/ipq60xx/Makefile" | head -1)
            if [ -n "$KERNEL_VERSION_LINE" ]; then
              KERNEL_VERSION=$(echo "$KERNEL_VERSION_LINE" | sed -E 's/.*=([0-9.]+).*/\1/')
              echo "VERSION_KERNEL=$KERNEL_VERSION" >> $GITHUB_ENV
            fi
          fi

          # 方法 3: 如果还是没找到，尝试从 .config 获取 (某些情况下)
          if [ -z "${{ env.VERSION_KERNEL }}" ] && [ -f ".config" ]; then
            KERNEL_VERSION_LINE=$(grep -E "^CONFIG_LINUX_KERNEL_VERSION" ".config" | head -1)
            if [ -n "$KERNEL_VERSION_LINE" ]; then
              KERNEL_VERSION=$(echo "$KERNEL_VERSION_LINE" | sed -E 's/.*=(.*)/\1/')
              echo "VERSION_KERNEL=$KERNEL_VERSION" >> $GITHUB_ENV
            fi
          fi

          # 如果仍未找到，设置默认值
          if [ -z "${{ env.VERSION_KERNEL }}" ]; then
            echo "VERSION_KERNEL=Unknown" >> $GITHUB_ENV
          fi

          # 获取 git 提交信息作为版本信息 (使用更安全的方法)
          # 获取最近一次提交的哈希
          COMMIT_HASH=$(git rev-parse --short HEAD)
          # 获取提交日期 (格式化)
          COMMIT_DATE=$(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')
          # 获取提交信息摘要 (只取第一行，避免多行和特殊字符)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | head -n 1 | cut -c 1-100)
          # 清理特殊字符
          COMMIT_MESSAGE_CLEANED=$(echo "$COMMIT_MESSAGE" | sed 's/[^a-zA-Z0-9 ._-]/_/g')
          echo "VERSION_INFO=Commit: $COMMIT_HASH ($COMMIT_DATE) - $COMMIT_MESSAGE_CLEANED" >> $GITHUB_ENV

          echo "内核版本 (VERSION_KERNEL): ${{ env.VERSION_KERNEL }}"
          echo "版本信息 (VERSION_INFO): ${{ env.VERSION_INFO }}"

      # --- 4. 最大化可用磁盘空间 (可选) ---
      # 注意: 这个步骤只有在环境变量 MADS 设置为 'true' 时才会执行
      # 如果您想总是执行，可以移除 'if: env.MADS == 'true'' 条件
      - name: Maximize Available Disk Space (最大化可用磁盘空间)
        if: env.MADS == 'true' # 仅当 MADS 为 true 时执行
        uses: AdityaGarg8/remove-unwanted-software@master
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          remove-large-packages: "true"
          remove-cached-tools: "true"
          remove-swapfile: "true"

      # --- 5. 初始化环境 ---
      - name: Initialization Environment (初始化环境)
        env:
          DEBIAN_FRONTEND: noninteractive # 非交互模式安装软件包
        run: |
          sudo -E apt-get -y update
          # 定义 OpenWrt 编译所需的依赖包列表 (适用于 Ubuntu 24.04)
          # 使用一个更简洁、安全的列表，避免语法错误和不必要的包
          DEPENDENCIES="build-essential libncurses5-dev zlib1g-dev gawk git wget unzip libssl-dev libelf-dev clang lld libc++-dev libc++abi-dev libxml2-dev xsltproc docbook-utils python3 python3-pip python3-setuptools python3-wheel rsync time bc flex bison libtool automake autopoint gettext pkg-config libexpat1-dev libpcre3-dev libreadline-dev libncurses-dev libssl-dev libelf-dev libz-dev libbz2-dev liblzma-dev libzstd-dev libarchive-dev libuv1-dev libffi-dev libgmp-dev libmpfr-dev libmpc-dev libisl-dev libcloog-dev libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.0-dev libgtksourceview-3.0-dev"
          # 安装依赖
          sudo -E apt-get -y install $DEPENDENCIES
          # 确保 Python 3 环境正常
          sudo -E apt-get -y install --reinstall python3-minimal python3-distutils
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo timedatectl set-timezone "$TZ" # 设置时区

      # --- 6. 设置工作目录和变量 ---
      - name: Setup Working Directory and Variables
        run: |
          cd openwrt-source
          echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
          echo "GENERAL_CONFIG_FILE=$OPENWRT_PATH/configs/General.config" >> $GITHUB_ENV
          echo "CONFIG_FILE=$OPENWRT_PATH/configs/${{ env.DEVICE_SHORT_NAME }}_${{ env.CONFIG_NAME }}.config" >> $GITHUB_ENV

      # --- 7. 合并配置文件 ---
      # 注意: 请确认源码仓库中有 configs/General.config 和 configs/{DEVICE}_{CONFIG}.config
      # 这里使用 shell 脚本来合并配置文件
      - name: Merge Config Files (合并配置文件)
        run: |
          cd openwrt-source
          echo "正在合并配置文件..."
          if [ ! -f "$GENERAL_CONFIG_FILE" ]; then
            echo "错误: 找不到通用配置文件 $GENERAL_CONFIG_FILE"
            exit 1
          fi
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "错误: 找不到设备配置文件 $CONFIG_FILE"
            exit 1
          fi
          # 合并配置文件
          cat "$GENERAL_CONFIG_FILE" "$CONFIG_FILE" > .config
          echo "配置文件已合并到 .config"

      # --- 8. 启动资源监控 ---
      # 启动后台资源监控（15分钟间隔）
      - name: Start Resource Monitoring (启动资源监控)
        run: |
          cd openwrt-source
          {
          while true; do
          sleep 900  # 15分钟间隔
          echo "====================== 编译期间系统占用监控 ======================"
          echo "🕒 监控时间: $(date)"
          echo "💾 磁盘使用情况:"
          df -hT | grep -E '^(Filesystem|/dev/)'
          echo "📦 内存使用情况:"
          free -h
          echo "⚡ CPU 负载:"
          uptime
          echo "=========================================================="
          echo "## 🔄 编译期间系统占用监控 （频率 15分钟）"
          echo "- 🕐 当前时间: $(date)"
          #echo "- 💾 磁盘/dev/root使用率: $(df -h / | tail -1 | awk '{print $5}')"
          echo "- 💾 磁盘/dev/sda1使用率: $(df -h /dev/sda1 | tail -1 | awk '{print $5}')"
          echo "- 📦 内存使用率: $(free | grep Mem | awk '{printf(\"%.1f%%\", \$3/\$2 * 100.0)}')"
          echo ""
          done
          } &
          # 记录监控进程ID以便后续关闭
          echo "MONITOR_PID=\$!" > monitor_pid.txt

      # --- 9. 编译固件 ---
      # 注意: 请根据您的实际源码仓库结构和编译命令进行调整
      # 例如，可能需要运行 ./scripts/feeds update -a && ./scripts/feeds install -a
      # 然后运行 make defconfig 或 make menuconfig
      # 最后运行 make -j$(nproc) V=s
      - name: Build Firmware (编译固件)
        run: |
          cd openwrt-source
          echo "开始编译固件..."
          # 示例命令，需要根据实际情况调整
          # ./scripts/feeds update -a
          # ./scripts/feeds install -a
          # make defconfig # 或者 make menuconfig
          # make -j$(nproc) V=s
          echo "编译完成。请替换此处的编译命令。"

      # --- 10. 关闭资源监控 ---
      - name: Stop Resource Monitoring (关闭资源监控)
        run: |
          cd openwrt-source
          if [ -f monitor_pid.txt ]; then
            MONITOR_PID=$(cat monitor_pid.txt)
            kill $MONITOR_PID 2>/dev/null || true
            rm monitor_pid.txt
          fi

      # --- 11. 上传 Artifact ---
      # 注意: 请根据实际的固件输出路径调整 'path'
      # 通常输出在 bin/targets/.../ 下
      - name: Upload Artifact (上传编译产物)
        uses: actions/upload-artifact
